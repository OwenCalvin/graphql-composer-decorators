(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{378:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"enum-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enum-type"}},[t._v("#")]),t._v(" Enum type")]),t._v(" "),s("p",[t._v("There are "),s("code",[t._v("enum")]),t._v(" types in GraphQL, however these do not support decorators with TypeScript. This implies that you have to use an alternative way of declaring them to "),s("code",[t._v("graphql-compose")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"the-creator-of-enumtype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-creator-of-enumtype"}},[t._v("#")]),t._v(" The creator of "),s("code",[t._v("EnumType")])]),t._v(" "),s("p",[t._v("Using the "),s("code",[t._v("EnumType")]),t._v(" class provided by "),s("code",[t._v("graphql-composer")]),t._v(" you can create a GraphQL "),s("code",[t._v("enum")]),t._v(" type by passing your "),s("code",[t._v("enum")]),t._v(" TypeScript as a parameter.")]),t._v(" "),s("h3",{attrs:{id:"type-declaration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-declaration"}},[t._v("#")]),t._v(" Type declaration")]),t._v(" "),s("p",[t._v("In the first parameter you have to give the name of the GraphQL type and in the second the enum.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" EnumType "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"graphql-compose"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Animal "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CAT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("COW")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animalEnum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EnumType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AnimalEnum"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"use-of-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-of-type"}},[t._v("#")]),t._v(" Use of type")]),t._v(" "),s("p",[t._v("To type your TypeScript class fields you'll use "),s("code",[t._v("Animal")]),t._v(" and for GraphQL fields it will be the variable "),s("code",[t._v("animalEnum")]),t._v(" that will be used.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ObjectType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Field")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" animalEnum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  pet"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Animal\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);